{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAErC,SAAS,gBAAgB,CAAC,QAAS,SAAC,CAApC,EACE,IA8BA,EAnBM,EAEA,EAbA,EAAS,EAAE,MAAM,CAAC,OAAO,CAAC,YAE3B,IASC,EAAa,AADJ,EAAG,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,EACZ,OAAO,CAN3B,GAQC,EAAY,EAAI,EAAM,IAAI,EAAE,KAAK,CAAC,EAAG,IAAI,IAAI,CAAC,SAAC,CAAA,CAAG,CAAxD,EACE,IAAI,EAAa,EAAE,KAAK,CAAC,EAAW,CAAC,SAAS,CAC1C,EAAc,EAAE,KAAK,CAAC,EAAW,CAAC,SAAS,QAG/C,AAAI,WAAW,IAAe,EAAW,QAAQ,CAAC,MAC5C,EAAW,QAAQ,CAAC,OACtB,EAAa,EAAW,KAAK,CAAC,GAAG,OAAO,CAAC,IAAK,KAC9C,EAAc,EAAY,KAAK,CAAC,GAAG,OAAO,CAAC,IAAK,MAG3C,CAAC,EAAa,CAAC,GAGjB,EAAa,EAAc,EAAI,EACxC,GAEA,AAAA,CAAA,EAAA,EAAM,OAAO,CAAC,EAAE,AAAF,EAAG,MAAM,CAAvB,KAAA,CAAA,EAAwB,EAAG,IAxB7B","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\ndocument.addEventListener(\"click\", function(e) {\n    var target = e.target.closest(\"thead th\");\n    if (!target) return;\n    sort(target);\n});\nfunction sort(elem) {\n    var _table_tBodies_;\n    // we find the column index number\n    var thead = _to_consumable_array(table.rows[0].cells);\n    var currentPos = thead.indexOf(elem);\n    var tableBody = _to_consumable_array(table.rows).slice(1, -1).sort(function(a, b) {\n        var firstValue = a.cells[currentPos].innerHTML;\n        var secondValue = b.cells[currentPos].innerHTML;\n        // we check whether these are numbers\n        if (parseFloat(firstValue) || firstValue.includes(\"$\")) {\n            if (firstValue.includes(\"$\")) {\n                firstValue = firstValue.slice(1).replace(\",\", \".\");\n                secondValue = secondValue.slice(1).replace(\",\", \".\");\n            }\n            return +firstValue - +secondValue;\n        }\n        return firstValue > secondValue ? 1 : -1;\n    });\n    (_table_tBodies_ = table.tBodies[0]).append.apply(_table_tBodies_, _to_consumable_array(tableBody));\n}\n\n//# sourceMappingURL=index.f90cacf5.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\n\ndocument.addEventListener('click', (e) => {\n  const target = e.target.closest('thead th');\n\n  if (!target) {\n    return;\n  }\n  sort(target);\n});\n\nfunction sort(elem) {\n  // we find the column index number\n  const thead = [...table.rows[0].cells];\n  const currentPos = thead.indexOf(elem);\n\n  const tableBody = [...table.rows].slice(1, -1).sort((a, b) => {\n    let firstValue = a.cells[currentPos].innerHTML;\n    let secondValue = b.cells[currentPos].innerHTML;\n\n    // we check whether these are numbers\n    if (parseFloat(firstValue) || firstValue.includes('$')) {\n      if (firstValue.includes('$')) {\n        firstValue = firstValue.slice(1).replace(',', '.');\n        secondValue = secondValue.slice(1).replace(',', '.');\n      }\n\n      return +firstValue - +secondValue;\n    }\n\n    return firstValue > secondValue ? 1 : -1;\n  });\n\n  table.tBodies[0].append(...tableBody);\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","addEventListener","e","_table_tBodies_","currentPos","tableBody","target","closest","thead","rows","cells","indexOf","sort","a","b","firstValue","innerHTML","secondValue","parseFloat","includes","replace","tBodies","append","apply"],"version":3,"file":"index.f90cacf5.js.map"}